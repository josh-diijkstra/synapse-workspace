{
	"name": "Data Cleansing Task 2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "BronzeSink902",
						"type": "DatasetReference"
					},
					"name": "F0902"
				},
				{
					"dataset": {
						"referenceName": "BronzeSink911",
						"type": "DatasetReference"
					},
					"name": "F0911"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SilverSinkF0902",
						"type": "DatasetReference"
					},
					"name": "SinkF0902",
					"rejectedDataLinkedService": {
						"referenceName": "PrimaryADLS",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "SilverSinkF0911",
						"type": "DatasetReference"
					},
					"name": "SinkF0911"
				},
				{
					"dataset": {
						"referenceName": "BronzeSink902",
						"type": "DatasetReference"
					},
					"name": "F0902NullReport"
				},
				{
					"dataset": {
						"referenceName": "BronzeSink911",
						"type": "DatasetReference"
					},
					"name": "F0911NullReport"
				}
			],
			"transformations": [
				{
					"name": "DistinctRows"
				},
				{
					"name": "DistinctRowsF0911"
				},
				{
					"name": "LookForNULLs"
				},
				{
					"name": "LookForNULLsF0911"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GBAID as string,",
				"          GBCTRY as integer,",
				"          GBFY as integer,",
				"          GBFQ as string,",
				"          GBLT as string,",
				"          GBSBL as string,",
				"          GBCO as string,",
				"          GBAPYC as decimal(38,18),",
				"          GBAN01 as decimal(38,18),",
				"          GBAN02 as decimal(38,18),",
				"          GBAN03 as decimal(38,18),",
				"          GBAN04 as decimal(38,18),",
				"          GBAN05 as decimal(38,18),",
				"          GBAN06 as decimal(38,18),",
				"          GBAN07 as decimal(38,18),",
				"          GBAN08 as decimal(38,18),",
				"          GBAN09 as decimal(38,18),",
				"          GBAN10 as decimal(38,18),",
				"          GBAN11 as decimal(38,18),",
				"          GBAN12 as decimal(38,18),",
				"          GBAN13 as decimal(38,18),",
				"          GBAN14 as decimal(38,18),",
				"          GBAPYN as decimal(38,18),",
				"          GBAWTD as decimal(38,18),",
				"          GBBORG as decimal(38,18),",
				"          GBPOU as decimal(38,18),",
				"          GBPC as integer,",
				"          GBTKER as decimal(38,18),",
				"          GBBREQ as decimal(38,18),",
				"          GBBAPR as decimal(38,18),",
				"          GBMCU as string,",
				"          GBOBJ as string,",
				"          GBSUB as string,",
				"          GBUSER as string,",
				"          GBPID as string,",
				"          GBUPMJ as decimal(38,18),",
				"          GBJOBN as string,",
				"          GBSBLT as string,",
				"          GBUPMT as integer,",
				"          GBCRCD as string,",
				"          GBCRCX as string,",
				"          GBPRGF as string,",
				"          GBAND01 as decimal(38,18),",
				"          GBAND02 as decimal(38,18),",
				"          GBAND03 as decimal(38,18),",
				"          GBAND04 as decimal(38,18),",
				"          GBAND05 as decimal(38,18),",
				"          GBAND06 as decimal(38,18),",
				"          GBAND07 as decimal(38,18),",
				"          GBAND08 as decimal(38,18),",
				"          GBAND09 as decimal(38,18),",
				"          GBAND10 as decimal(38,18),",
				"          GBAND11 as decimal(38,18),",
				"          GBAND12 as decimal(38,18),",
				"          GBAND13 as decimal(38,18),",
				"          GBAND14 as decimal(38,18)",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> F0902",
				"source(output(",
				"          GLKCO as string,",
				"          GLDCT as string,",
				"          GLDOC as integer,",
				"          GLDGJ as decimal(38,18),",
				"          GLJELN as integer,",
				"          GLEXTL as string,",
				"          GLPOST as string,",
				"          GLICU as integer,",
				"          GLICUT as string,",
				"          GLDICJ as decimal(38,18),",
				"          GLDSYJ as decimal(38,18),",
				"          GLTICU as integer,",
				"          GLCO as string,",
				"          GLANI as string,",
				"          GLAM as string,",
				"          GLAID as string,",
				"          GLMCU as string,",
				"          GLOBJ as string,",
				"          GLSUB as string,",
				"          GLSBL as string,",
				"          GLSBLT as string,",
				"          GLLT as string,",
				"          GLPN as integer,",
				"          GLCTRY as integer,",
				"          GLFY as integer,",
				"          GLFQ as string,",
				"          GLCRCD as string,",
				"          GLCRR as integer,",
				"          GLHCRR as integer,",
				"          GLHDGJ as decimal(38,18),",
				"          GLAA as decimal(38,18),",
				"          GLU as decimal(38,18),",
				"          GLUM as string,",
				"          GLGLC as string,",
				"          GLRE as string,",
				"          GLEXA as string,",
				"          GLEXR as string,",
				"          GLR1 as string,",
				"          GLR2 as string,",
				"          GLR3 as string,",
				"          GLSFX as string,",
				"          GLODOC as integer,",
				"          GLODCT as string,",
				"          GLOSFX as string,",
				"          GLPKCO as string,",
				"          GLOKCO as string,",
				"          GLPDCT as string,",
				"          GLAN8 as integer,",
				"          GLCN as string,",
				"          GLDKJ as decimal(38,18),",
				"          GLDKC as decimal(38,18),",
				"          GLASID as string,",
				"          GLBRE as string,",
				"          GLRCND as string,",
				"          GLSUMM as string,",
				"          GLPRGE as string,",
				"          GLTNN as string,",
				"          GLALT1 as string,",
				"          GLALT2 as string,",
				"          GLALT3 as string,",
				"          GLALT4 as string,",
				"          GLALT5 as string,",
				"          GLALT6 as string,",
				"          GLALT7 as string,",
				"          GLALT8 as string,",
				"          GLALT9 as string,",
				"          GLALT0 as string,",
				"          GLALTT as string,",
				"          GLALTU as string,",
				"          GLALTV as string,",
				"          GLALTW as string,",
				"          GLALTX as string,",
				"          GLALTZ as string,",
				"          GLDLNA as string,",
				"          GLCFF1 as string,",
				"          GLCFF2 as string,",
				"          GLASM as string,",
				"          GLBC as string,",
				"          GLVINV as string,",
				"          GLIVD as decimal(38,18),",
				"          GLWR01 as string,",
				"          GLPO as string,",
				"          GLPSFX as string,",
				"          GLDCTO as string,",
				"          GLLNID as decimal(38,18),",
				"          GLWY as integer,",
				"          GLWN as integer,",
				"          GLFNLP as string,",
				"          GLOPSQ as decimal(38,18),",
				"          GLJBCD as string,",
				"          GLJBST as string,",
				"          GLHMCU as string,",
				"          GLDOI as integer,",
				"          GLALID as string,",
				"          GLALTY as string,",
				"          GLDSVJ as decimal(38,18),",
				"          GLTORG as string,",
				"          GLREG as integer,",
				"          GLPYID as integer,",
				"          GLUSER as string,",
				"          GLPID as string,",
				"          GLJOBN as string,",
				"          GLUPMJ as decimal(38,18),",
				"          GLUPMT as integer,",
				"          GLABR1 as string,",
				"          GLABR2 as string,",
				"          GLABR3 as string,",
				"          GLABR4 as string,",
				"          GLABT1 as string,",
				"          GLABT2 as string,",
				"          GLABT3 as string,",
				"          GLABT4 as string,",
				"          GLITM as integer,",
				"          GLPM01 as string,",
				"          GLPM02 as string,",
				"          GLPM03 as string,",
				"          GLPM04 as string,",
				"          GLPM05 as string,",
				"          GLPM06 as string,",
				"          GLPM07 as string,",
				"          GLPM08 as string,",
				"          GLPM09 as string,",
				"          GLPM10 as string,",
				"          GLBCRC as string,",
				"          GLCRRM as string,",
				"          GLPRGF as string,",
				"          GLTXA1 as string,",
				"          GLEXR1 as string,",
				"          GLTXITM as integer,",
				"          GLACTB as string,",
				"          GLGPF1 as string,",
				"          GLACR as decimal(38,18),",
				"          GLDLNID as decimal(38,18),",
				"          GLCKNU as string,",
				"          GLBUPC as string,",
				"          GLAHBU as string,",
				"          GLEPGC as string,",
				"          GLJPGC as string,",
				"          GLRC5 as integer,",
				"          GLSFXE as integer,",
				"          GLOFM as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> F0911",
				"F0902 aggregate(groupBy(mycols = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> DistinctRows",
				"F0911 aggregate(groupBy(mycols = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> DistinctRowsF0911",
				"DistinctRows split(contains(array(toString(columns())),isNull(#item)),",
				"     disjoint: false) ~> LookForNULLs@(hasNULLs, noNULLs)",
				"DistinctRowsF0911 split(contains(array(toString(columns())),isNull(#item)),",
				"     disjoint: false) ~> LookForNULLsF0911@(hasNULLs, noNULLs)",
				"LookForNULLs@noNULLs sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['F0902.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkF0902",
				"LookForNULLsF0911@noNULLs sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['F0911.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkF0911",
				"LookForNULLs@hasNULLs sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['F0902NullReport'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> F0902NullReport",
				"LookForNULLsF0911@hasNULLs sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['F0911NullReport'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> F0911NullReport"
			]
		}
	}
}